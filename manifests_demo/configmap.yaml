kind: ConfigMap 
apiVersion: v1 
metadata:
    name: wca-config
    namespace: wca
data:
  wca_config.yml: |

    runner: !AllocationRunner
      action_delay: 5.0
      rdt_enabled: true
      enable_derived_metrics: True
      node: !KubernetesNode
        # We support two options: cgroupfs, systemd.
        cgroup_driver: cgroupfs
        client_private_key: "/etc/kubernetes/ssl/apiserver-kubelet-client.key"
        client_cert: "/etc/kubernetes/ssl/apiserver-kubelet-client.crt"
        kubelet_endpoint: "https://100.64.176.33:10250" 
        monitored_namespaces: ["kubecon-demo"]

      metrics_storage: !LogStorage
        overwrite: True
        output_filename: /var/lib/wca/metrics.prom
      anomalies_storage: !LogStorage
        overwrite: True
        output_filename: /var/lib/wca/anomalies.prom
      allocations_storage: !LogStorage
        overwrite: True
        output_filename: /var/lib/wca/allocations.prom

      # allocator: !StaticAllocator
      #   rules: 
      #   - name: Static default rule for all tasks.
      #     allocations:
      #       cpu_quota: 1.0
      #       cpu_shares: 10
      #   # Alternate way to provide allocations rules.
      #   config: "/etc/wca/static_allocator.yml"
      allocator: !ExampleAllocator

      extra_labels:
        env_uniq_id: '33'
        own_ip: '100.64.176.33'


  #
  # Example of configuring of built-in rules based allocator.
  # 
  static_allocator.yml: |

    - name: Dynamic rules loaded from shared file.
      # Labels selector to apply allocations rules only for specified tasks.
      labels:
        task_kind: best-effort
      allocations:
        cpu_quota: 0.02
        cpu_shares: 2
        rdt:
          name: best-effort
          mb: 'MB:0=10;1=10'
          l3: 'MB:0=1;1=1'

    - name: Dynamic rules loaded from shared file.
      # Labels selector to apply allocations rules only for specified tasks.
      labels:
        task_kind: latency-critical
      allocations:
        cpu_quota: 1.
        cpu_shares: 1000
        rdt:
          name: latency-critical
          mb: 'MB:0=100;1=100'
          l3: 'MB:0=7ff;1=7ff'

  #
  # Example of dummy allocator, that justs returns hello_world metric.

  dummy_allocator.py: |
    from wca.metrics import Metric
    from wca.allocators import Allocator
    class DummyAllocator(Allocator):
        def allocate(self, *args):
            return {}, [], [Metric('hello_world', 1)]


