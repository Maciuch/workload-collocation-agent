diff --git a/src/config.rs b/src/config.rs
index 62f24c1..3ce0fd0 100644
--- a/src/config.rs
+++ b/src/config.rs
@@ -198,6 +198,13 @@ impl<T: Hash + Eq + Send + Display + Clone> Config<T> {
         self
     }
 
+    pub fn histogram_config(mut self, max_value: u64, precision: u32) -> Self {
+        self.histogram_config = Histogram::configure()
+            .max_value( max_value)
+            .precision(precision);
+        self
+    }
+
     /// Build a new Receiver based on the current configuration
     pub fn build(self) -> Receiver<T> {
         Receiver::configured(self)
diff --git a/src/data/histograms.rs b/src/data/histograms.rs
index 87105f0..dc83ce3 100644
--- a/src/data/histograms.rs
+++ b/src/data/histograms.rs
@@ -2,6 +2,7 @@
 
 extern crate histogram;
 
+use std::clone::Clone;
 use fnv::FnvHashMap;
 use histogram::Histogram;
 use std::hash::Hash;
@@ -14,20 +15,33 @@ pub struct Histograms<T> {
     pub data: FnvHashMap<T, Histogram>,
 }
 
-impl<T: Hash + Eq> Default for Histograms<T> {
+impl<T: Hash + Eq + Clone> Default for Histograms<T> {
     fn default() -> Histograms<T> {
         Histograms {
-            config: Histogram::configure().max_value(ONE_MINUTE),
+            config: Histogram::configure()
+                .max_value(ONE_SECOND)
+                .precision(1),
             data: FnvHashMap::default(),
         }
     }
 }
 
-impl<T: Hash + Eq> Histograms<T> {
+impl<T: Hash + Eq + Clone> Histograms<T> {
     pub fn new() -> Histograms<T> {
         Default::default()
     }
 
+    pub fn new_from_config(config: histogram::Config) -> Histograms<T> {
+        Histograms {
+            config: config,
+            data: FnvHashMap::default(),
+        }
+    }
+
+    pub fn clone(&mut self) -> FnvHashMap<T, Histogram> {
+        self.data.clone()
+    }
+
     pub fn increment(&mut self, key: T, duration: u64) {
         self.increment_by(key, duration, 1);
     }
diff --git a/src/receiver.rs b/src/receiver.rs
index f83bbb2..ef8ada5 100644
--- a/src/receiver.rs
+++ b/src/receiver.rs
@@ -11,8 +11,11 @@ use std::collections::HashSet;
 use std::fmt::Display;
 use std::hash::Hash;
 use std::net::ToSocketAddrs;
-use std::sync::Arc;
+use std::sync::{Arc, Mutex};
 use tiny_http::{Request, Response, Server};
+use fnv::FnvHashMap;
+use histogram::Histogram;
+use std::borrow::Borrow;
 
 // define token numbers for data and control queues
 const TOKEN_DATA: usize = 1;
@@ -33,6 +36,7 @@ pub struct Receiver<T> {
     allans: Allans<T>,
     counters: Counters<T>,
     histograms: Histograms<T>,
+    histograms_mutex: Arc<Mutex<FnvHashMap<T, Histogram>>>,
     meters: Meters<T>,
     interests: HashSet<Interest<T>>,
     taus: Vec<usize>,
@@ -60,6 +64,7 @@ impl<T: Hash + Eq + Send + Display + Clone> Receiver<T> {
     pub fn configured(config: Config<T>) -> Receiver<T> {
         let (data_tx, data_rx) = channel::sync_channel::<Vec<Sample<T>>>(config.capacity);
         let (control_tx, control_rx) = channel::sync_channel::<ControlMessage<T>>(config.capacity);
+        let histograms_mutex = Arc::new(Mutex::new(FnvHashMap::default()));
         let empty_queue = Arc::new(Queue::with_capacity(config.capacity));
         for _ in 0..config.capacity {
             let _ = empty_queue.push(Vec::with_capacity(config.batch_size));
@@ -78,6 +83,7 @@ impl<T: Hash + Eq + Send + Display + Clone> Receiver<T> {
         let window_time = start_time + window_duration;
         let run_duration = config.windows as u64 * window_duration;
         let end_time = start_time + run_duration;
+        let histograms = Histograms::new_from_config(config.histogram_config);
 
         let poll = Poll::new().unwrap();
         poll.register(
@@ -106,7 +112,8 @@ impl<T: Hash + Eq + Send + Display + Clone> Receiver<T> {
             control_rx: control_rx,
             allans: Allans::new(),
             counters: Counters::new(),
-            histograms: Histograms::new(),
+            histograms: histograms,
+            histograms_mutex: histograms_mutex,
             meters: Meters::new(),
             interests: HashSet::new(),
             taus: common::default_taus(),
@@ -123,6 +130,10 @@ impl<T: Hash + Eq + Send + Display + Clone> Receiver<T> {
         Config::default()
     }
 
+    pub fn get_interval_histograms(&self) -> &Arc<Mutex<FnvHashMap<T, Histogram>>> {
+        self.histograms_mutex.borrow()
+    }
+
     /// returns a clone of the `Sender`
     pub fn get_sender(&self) -> Sender<T> {
         Sender::new(
@@ -281,6 +292,7 @@ impl<T: Hash + Eq + Send + Display + Clone> Receiver<T> {
                 }
             }
 
+            *self.histograms_mutex.lock().unwrap() = self.histograms.clone();
             self.histograms.clear();
             self.window_time += self.window_duration;
             return true;
