diff --git a/Cargo.lock b/Cargo.lock
index 59ff503..922479b 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -407,8 +407,7 @@ dependencies = [
 
 [[package]]
 name = "ratelimit"
-version = "0.4.2"
-source = "registry+https://github.com/rust-lang/crates.io-index"
+version = "0.4.4-pre"
 
 [[package]]
 name = "redox_syscall"
@@ -429,7 +428,7 @@ dependencies = [
  "mpmc 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "pad 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)",
  "rand 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)",
- "ratelimit 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)",
+ "ratelimit 0.4.4-pre",
  "shuteye 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)",
  "simple_logger 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)",
  "slab 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)",
@@ -668,7 +667,6 @@ dependencies = [
 "checksum pad 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)" = "d1bf3336e626b898e7263790d432a711d4277e22faea20dd9f70e0cab268fa58"
 "checksum png 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)" = "48f397b84083c2753ba53c7b56ad023edb94512b2885ffe227c66ff7edb61868"
 "checksum rand 0.3.17 (registry+https://github.com/rust-lang/crates.io-index)" = "61efcbcd9fa8d8fbb07c84e34a8af18a1ff177b449689ad38a6e9457ecc7b2ae"
-"checksum ratelimit 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)" = "c2587e63d5dd371de267bab5f73e32306bf457a3b1f389983a1b2c40b36d581f"
 "checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)" = "c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1"
 "checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)" = "dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda"
 "checksum rusttype 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)" = "07b8848db3b5b5ba97020c6a756c0fdf2dbf2ad7c0d06aa4344a3f2f49c3fe17"
diff --git a/Cargo.toml b/Cargo.toml
index 8617db1..1494f8b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -47,7 +47,7 @@ mio = "=0.6.10"
 mpmc = "=0.1.2"
 pad = "=0.1.4"
 rand = "=0.3.17"
-ratelimit = "=0.4.2"
+ratelimit = { path = "ratelimit" }
 shuteye = "=0.3.2"
 slab = "=0.3.0"
 simple_logger = "=0.4.0"
diff --git a/README_WC.md b/README_WC.md
new file mode 100644
index 0000000..e52c48b
--- /dev/null
+++ b/README_WC.md
@@ -0,0 +1,14 @@
+# Building and running rpc-perf with variable load support
+
+## Build
+```
+cargo build --release
+```
+
+## Run
+```
+./target/release/rpc-perf --config configs/sinus_workload.toml --server 127.0.0.1:11211
+```
+
+## Configuration file
+Example [sinus_workload.toml](./configs/sinus_workload.toml) config to sins-like load support:
diff --git a/configs/sinus_workload.toml b/configs/sinus_workload.toml
new file mode 100644
index 0000000..8d95f95
--- /dev/null
+++ b/configs/sinus_workload.toml
@@ -0,0 +1,27 @@
+# this example runs a sinus workload suitable for memcache
+# important that .toml has this general parameters (example value)
+
+[general]
+request-timeout = 200
+connect-timeout = 500
+threads = 1
+connections = 1
+duration = 1
+windows = 30
+protocol = "memcache"
+tcp-nodelay = false
+ipv4 = true
+ipv6 = true
+database = 0
+
+[[workload]]
+name = "get"
+method = "get"
+rate = 2000
+period = 15                 # strongly required to generate sins-like load, the unit is second, default value is 1
+amplitude = 1000            # necessary to generate sins-like load, must be: amplitude <= rate/2
+phase = 0                   # not necessary to generate sins-like load, default value is 0
+  [[workload.parameter]]
+  style = "random"
+  size = 3
+  regenerate = true
diff --git a/src/cfgtypes/mod.rs b/src/cfgtypes/mod.rs
index cc04903..391c7fe 100644
--- a/src/cfgtypes/mod.rs
+++ b/src/cfgtypes/mod.rs
@@ -22,18 +22,36 @@ pub mod tools;
 
 pub type CResult<T> = Result<T, String>;
 
+pub struct SinusParametersWorkload {
+    pub amplitude: i64,
+    pub period: i64,
+    pub phase: i64,
+}
+
+impl SinusParametersWorkload {
+    pub fn new(amplitude: i64, period: i64, phase: i64) -> SinusParametersWorkload {
+        SinusParametersWorkload {
+            amplitude: amplitude,
+            period: period,
+            phase: phase,
+        }
+    }
+}
+
 pub struct BenchmarkWorkload {
     pub name: String,
     pub rate: usize,
     pub gen: Box<ProtocolGen>,
+    pub sinus_parameters: Option<SinusParametersWorkload>,
 }
 
 impl BenchmarkWorkload {
-    pub fn new(name: String, rate: usize, gen: Box<ProtocolGen>) -> BenchmarkWorkload {
+    pub fn new(name: String, rate: usize, gen: Box<ProtocolGen>, sinus_parameters: Option<SinusParametersWorkload>) -> BenchmarkWorkload {
         BenchmarkWorkload {
             name: name,
             rate: rate,
             gen: gen,
+            sinus_parameters: sinus_parameters,
         }
     }
 }
diff --git a/src/codec/echo/mod.rs b/src/codec/echo/mod.rs
index 4d3958a..c4927bb 100644
--- a/src/codec/echo/mod.rs
+++ b/src/codec/echo/mod.rs
@@ -137,7 +137,7 @@ fn extract_workload(workload: &BTreeMap<String, Value>) -> CResult<BenchmarkWork
 
         let gen = Box::new(EchoGen { value: param });
 
-        Ok(BenchmarkWorkload::new(name, rate as usize, gen))
+        Ok(BenchmarkWorkload::new(name, rate as usize, gen, None))
     } else {
         Err("malformed config: 'parameter' must be an array".to_owned())
     }
diff --git a/src/codec/memcache/mod.rs b/src/codec/memcache/mod.rs
index ad74878..6eca75f 100644
--- a/src/codec/memcache/mod.rs
+++ b/src/codec/memcache/mod.rs
@@ -305,7 +305,24 @@ fn extract_workload(i: usize, workload: &BTreeMap<String, Value>) -> CResult<Ben
             _ => return Err(format!("invalid command: {}", method)),
         };
 
-        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd)))
+        let amplitude = workload
+            .get("amplitude")
+            .and_then(|k| k.as_integer())
+            .unwrap_or(0);
+
+        let period = workload
+            .get("period")
+            .and_then(|k| k.as_integer())
+            .unwrap_or(1);
+
+        let phase = workload
+            .get("phase")
+            .and_then(|k| k.as_integer())
+            .unwrap_or(0);
+
+        let sinus_parameters = SinusParametersWorkload::new(amplitude, period, phase);
+
+        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd), Some(sinus_parameters)))
     } else {
         Err("malformed config: 'parameter' must be an array".to_owned())
     }
diff --git a/src/codec/ping/mod.rs b/src/codec/ping/mod.rs
index 616e145..1a98e62 100644
--- a/src/codec/ping/mod.rs
+++ b/src/codec/ping/mod.rs
@@ -95,5 +95,5 @@ fn extract_workload(workload: &BTreeMap<String, Value>) -> CResult<BenchmarkWork
         .unwrap_or("ping")
         .to_owned();
 
-    Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(Ping)))
+    Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(Ping), None))
 }
diff --git a/src/codec/redis_inline/mod.rs b/src/codec/redis_inline/mod.rs
index 75984f1..8f9d8f3 100644
--- a/src/codec/redis_inline/mod.rs
+++ b/src/codec/redis_inline/mod.rs
@@ -276,8 +276,7 @@ fn extract_workload(workload: &BTreeMap<String, Value>) -> CResult<BenchmarkWork
             }
             _ => return Err(format!("invalid command: {}", method)),
         };
-
-        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd)))
+        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd), None))
     } else {
         Err("malformed config: 'parameter' must be an array".to_owned())
     }
diff --git a/src/codec/redis_resp/mod.rs b/src/codec/redis_resp/mod.rs
index 0863e25..4feb71c 100644
--- a/src/codec/redis_resp/mod.rs
+++ b/src/codec/redis_resp/mod.rs
@@ -267,7 +267,7 @@ fn extract_workload(workload: &BTreeMap<String, Value>) -> CResult<BenchmarkWork
             _ => return Err(format!("invalid command: {}", method)),
         };
 
-        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd)))
+        Ok(BenchmarkWorkload::new(name, rate as usize, Box::new(cmd), None))
     } else {
         Err("malformed config: 'parameter' must be an array".to_owned())
     }
diff --git a/src/codec/thrift/config.rs b/src/codec/thrift/config.rs
index d2a4427..fc29e12 100644
--- a/src/codec/thrift/config.rs
+++ b/src/codec/thrift/config.rs
@@ -121,7 +121,7 @@ fn extract_workload(workload: &BTreeMap<String, Value>) -> CResult<BenchmarkWork
         parameters: ps,
     });
 
-    Ok(BenchmarkWorkload::new(name, rate as usize, cmd))
+     Ok(BenchmarkWorkload::new(name, rate as usize, cmd, None))
 }
 
 fn extract_parameter(i: usize, parameter: &BTreeMap<String, Value>) -> CResult<Parameter> {
diff --git a/src/request/workload.rs b/src/request/workload.rs
index 8f4186a..e8325ad 100644
--- a/src/request/workload.rs
+++ b/src/request/workload.rs
@@ -17,7 +17,7 @@ pub const BUCKET_SIZE: usize = 10_000;
 
 use cfgtypes;
 
-use cfgtypes::ProtocolGen;
+use cfgtypes::{ProtocolGen, SinusParametersWorkload};
 use common::stats::Stat;
 use mpmc::Queue;
 use ratelimit;
@@ -45,6 +45,7 @@ pub fn launch_workloads(
             work_queue.to_vec(),
             stats.clone(),
             clocksource.clone(),
+             w.sinus_parameters,
         ).unwrap();
 
         let _ = thread::Builder::new()
@@ -71,14 +72,26 @@ impl Workload {
         queue: Vec<Queue<Vec<u8>>>,
         stats: Sender<Stat>,
         clocksource: Clocksource,
+        sinus_parameters: Option<SinusParametersWorkload>,
     ) -> Result<Workload, &'static str> {
         let mut ratelimit = None;
+        let mut amplitude= 0;
+        let mut period = 1;
+        let mut phase = 0;
+        if let Some(r) = sinus_parameters {
+            amplitude = r.amplitude;
+            period = r.period;
+            phase = r.phase;
+        }
         if let Some(r) = rate {
             if r > 0 {
                 ratelimit = Some(
                     ratelimit::Builder::new()
                         .frequency(r as u32)
                         .capacity(BUCKET_SIZE as u32)
+                        .amplitude(amplitude)
+                        .phase(phase)
+                        .period(period)
                         .build(),
                 );
             }
